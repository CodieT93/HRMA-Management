version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hr_postgres_dev
    environment:
      POSTGRES_DB: hr_management
      POSTGRES_USER: hr_user
      POSTGRES_PASSWORD: hr_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - hr_network_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hr_user -d hr_management"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: hr_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - hr_network_dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Server (Development)
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: hr_server_dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://hr_user:hr_password@postgres:5432/hr_management
      - REDIS_URL=redis://redis:6379
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hr_network_dev
    command: npm run dev

  # Frontend Client (Development)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: hr_client_dev
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - server
    networks:
      - hr_network_dev
    command: npm run dev

volumes:
  postgres_data_dev:
  redis_data_dev:

networks:
  hr_network_dev:
    driver: bridge
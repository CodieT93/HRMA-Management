name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Lint and format check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../server && npm ci
          cd ../e2e && npm ci

      - name: Lint client code
        run: cd client && npm run lint

      - name: Lint server code
        run: cd server && npm run lint

      - name: Type check client
        run: cd client && npm run type-check

      - name: Type check server
        run: cd server && npx tsc --noEmit

  # Unit and integration tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hr_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../server && npm ci

      - name: Setup test database
        run: |
          cd server
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/hr_management_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "JWT_SECRET=test-secret-key" >> .env.test
          npx prisma generate
          npx prisma migrate deploy

      - name: Run client tests
        run: cd client && npm test -- --coverage --watchAll=false

      - name: Run server tests
        run: cd server && npm test -- --coverage

      - name: Upload client coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./client/coverage/lcov.info
          flags: client
          name: client-coverage

      - name: Upload server coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage/lcov.info
          flags: server
          name: server-coverage

  # Build applications
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../server && npm ci

      - name: Build client
        run: cd client && npm run build

      - name: Build server
        run: cd server && npm run build

      - name: Upload client build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: client-build
          path: client/build/

      - name: Upload server build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: server-build
          path: server/dist/

  # End-to-end tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hr_management_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../server && npm ci
          cd ../e2e && npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: client-build
          path: client/build/

      - name: Download server build artifacts
        uses: actions/download-artifact@v3
        with:
          name: server-build
          path: server/dist/

      - name: Setup e2e database
        run: |
          cd server
          cp .env.example .env.e2e
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/hr_management_e2e" >> .env.e2e
          echo "REDIS_URL=redis://localhost:6379" >> .env.e2e
          echo "JWT_SECRET=e2e-secret-key" >> .env.e2e
          npx prisma generate
          npx prisma migrate deploy
          npx prisma db seed

      - name: Start server
        run: |
          cd server
          npm start &
          sleep 10

      - name: Start client
        run: |
          cd client
          npx serve -s build -l 3000 &
          sleep 5

      - name: Run E2E tests
        run: |
          cd e2e
          npm run cypress:run

      - name: Upload E2E screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-screenshots
          path: e2e/cypress/screenshots/

      - name: Upload E2E videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-videos
          path: e2e/cypress/videos/

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../server && npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level moderate
          cd client && npm audit --audit-level moderate
          cd ../server && npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: client-build
          path: client/build/

      - name: Download server build artifacts
        uses: actions/download-artifact@v3
        with:
          name: server-build
          path: server/dist/

      - name: Deploy to AWS
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # Example: AWS CLI, Docker, etc.

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, e2e, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: client-build
          path: client/build/

      - name: Download server build artifacts
        uses: actions/download-artifact@v3
        with:
          name: server-build
          path: server/dist/

      - name: Deploy to AWS
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here
          # Example: AWS CLI, Docker, etc.

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

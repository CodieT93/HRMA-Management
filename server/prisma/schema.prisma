// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String
  lastName    String
  password    String
  role        UserRole @default(EMPLOYEE)
  phoneNumber String?
  address     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee         Employee?
  notifications    Notification[]
  reviewedRequests LeaveRequest[] @relation("LeaveRequestReviewer")
  performanceReviews PerformanceReview[] @relation("PerformanceReviewer")

  @@map("users")
}

model Employee {
  id           String   @id @default(cuid())
  employeeId   String   @unique
  firstName    String
  lastName     String
  email        String   @unique
  phoneNumber  String?
  address      String?
  department   String
  position     String
  salary       Float
  hireDate     DateTime
  managerId    String?
  skills       String[]
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user                User                 @relation(fields: [id], references: [id], onDelete: Cascade)
  manager             Employee?            @relation("EmployeeManager", fields: [managerId], references: [id])
  directReports       Employee[]           @relation("EmployeeManager")
  leaveRequests       LeaveRequest[]
  performanceReviews  PerformanceReview[]
  certifications      Certification[]

  @@map("employees")
}

model LeaveRequest {
  id            String      @id @default(cuid())
  employeeId    String
  leaveType     LeaveType
  startDate     DateTime
  endDate       DateTime
  daysRequested Int
  reason        String
  status        LeaveStatus @default(PENDING)
  submittedAt   DateTime    @default(now())
  reviewedAt    DateTime?
  reviewedBy    String?
  comments      String?

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  reviewer User?    @relation("LeaveRequestReviewer", fields: [reviewedBy], references: [id])

  @@map("leave_requests")
}

model PerformanceReview {
  id                    String        @id @default(cuid())
  employeeId            String
  reviewerId            String
  reviewPeriod          String
  overallRating         Int
  achievements          String[]
  areasForImprovement   String[]
  comments              String
  status                ReviewStatus  @default(DRAFT)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  employee Employee            @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  reviewer User                @relation("PerformanceReviewer", fields: [reviewerId], references: [id])
  goals    PerformanceGoal[]

  @@map("performance_reviews")
}

model PerformanceGoal {
  id          String      @id @default(cuid())
  reviewId    String
  title       String
  description String
  targetDate  DateTime
  status      GoalStatus  @default(NOT_STARTED)
  progress    Int         @default(0)
  comments    String?

  // Relations
  review PerformanceReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("performance_goals")
}

model Certification {
  id                   String    @id @default(cuid())
  employeeId           String
  name                 String
  issuingOrganization  String
  issueDate            DateTime
  expiryDate           DateTime?
  credentialId         String?

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserRole {
  ADMIN
  HR_MANAGER
  MANAGER
  EMPLOYEE
}

enum LeaveType {
  ANNUAL
  SICK
  PERSONAL
  MATERNITY
  PATERNITY
  BEREAVEMENT
  UNPAID
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ReviewStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  APPROVED
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}
